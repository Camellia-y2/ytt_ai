// 拷贝数组的值
const arr = [1,2,3]
// 法1
const newArr = [...arr] 
// 法2
let arr2 = arr.slice(0) // 切割，浅拷贝，从0开始切，到最后
arr2[1] = 'b'
console.log(arr2, arr) //[ 1, 'b', 3 ] [ 1, 2, 3 ] 浅拷贝!！！因为它的值是简单数据类型，所以不会影响到原数组


const arr3 = [[1,2],[3,4],[5,[6,7]]] // 需要深拷贝!!! 它的每一项值都是对象，甚至还嵌套了对象，是引用赋值
const arr4 = arr3.slice()  // 无法实现深拷贝，会影响目源数组
arr4[0][0] = 'a'
console.log(arr4,arr3) 
// [ [ 'a', 2 ], [ 3, 4 ], [ 5, [ 6, 7 ] ] ]
//  [ [ 'a', 2 ], [ 3, 4 ], [ 5, [ 6, 7 ] ] ]

// 使用arr.concat()
let arr5 = arr3.concat()
arr5[0][1] = 'b'
console.log(arr5, arr3) // 还是不行，只可以解决浅拷贝
// [ [ 'a', 'b' ], [ 3, 4 ], [ 5, [ 6, 7 ] ] ]
// [ [ 'a', 'b' ], [ 3, 4 ], [ 5, [ 6, 7 ] ] ]
